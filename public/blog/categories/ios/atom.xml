<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Mobile Development]]></title>
  <link href="http://mobile-dev.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://mobile-dev.com/"/>
  <updated>2012-08-29T14:02:48-07:00</updated>
  <id>http://mobile-dev.com/</id>
  <author>
    <name><![CDATA[Alex Koloskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Morning Coffee #3]]></title>
    <link href="http://mobile-dev.com/blog/2012/07/11/morning-coffee-number-3/"/>
    <updated>2012-07-11T22:54:00-07:00</updated>
    <id>http://mobile-dev.com/blog/2012/07/11/morning-coffee-number-3</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Most Important Debugging Trick for XCode</strong>: I was recently helping one of my co-workers to figure out
some nasty exception in his iOS project and remembered a debugging trick,
which is probably one of the most important ones iOS developer should know.
In many cases, your app will crash with some exception, but stack trace will point to your
UIApplicationMain and will not contain any information about where this exception
was actually raised. Here's how to get the proper stack trace.

<ul>
<li>Go to Breakpoints panel</li>
<li>Press '+' sign on the bottom of it</li>
<li>Select 'Add exception breakpoint' and keep all settings at their defaults
Now if you run your application again and reproduce the error conditions, when
exception is raised, instead of being caught only by the top-level exception handler and
lose all the relevant stack trace information, now it will stop at the breakpoint
right at the place where exception was originally raised and pointing to the exact
source of the problem. Enjoy.
<img src="/images/xcode-exception-breakpoint-1.png" title="Add Exception Breakpoint Dialog" ></li>
</ul>
</li>
<li><strong><a href="http://abitofcode.com/2012/07/cocos2d-useful-tools/">List of Useful Cocos2D Tools</a></strong>:
Nice article mentioning bunch of tools that developers can use in their
<a href="http://www.cocos2d-iphone.org/">Cocos2D-based</a> projects. Some of them are quite obvious
and not really Cocos2D-related, like Photoshop or Audacity, but it mentions all that are really
useful and important like <a href="http://click.linksynergy.com/fs-bin/stat?id=Vg6WGCcESLE&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Fspritehelper%252Fid416068717%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30">SpriteEditor</a>,
<a href="http://click.linksynergy.com/fs-bin/stat?id=Vg6WGCcESLE&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Flevelhelper%252Fid421740820%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30">LevelHelper</a>,
<a href="http://www.codeandweb.com/texturepacker">TexturePacker</a>, <a href="http://www.mapeditor.org/">Tiled</a> etc.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morning Coffee #1]]></title>
    <link href="http://mobile-dev.com/blog/2012/07/09/morning-coffee-number-1/"/>
    <updated>2012-07-09T09:07:00-07:00</updated>
    <id>http://mobile-dev.com/blog/2012/07/09/morning-coffee-number-1</id>
    <content type="html"><![CDATA[<p><strong>Morning Coffee #1</strong></p>

<ul>
<li><strong><a href="https://github.com/mattt/cupertino">Cupertino:</a></strong> I'm a big fan of the command line (at least when we are talking about development), so when I see a new tool, that eliminates yet another necessity to tolerate some web-based UI, it makes my heart sing. <a href="http://mattt.me/"> Matt Thompson </a> (of <a href="http://inductionapp.com/">Induction</a> and <a href="https://github.com/AFNetworking/AFNetworking/"> AFNetworking </a> fame among other things) came up with <a href="https://github.com/mattt/cupertino">Cupertino</a> - command line tool/gem to automate things we normally do through the Apple's Developer Portal, like managing devices, certificates etc. This is a perfection:

<ul>
<li><code>$ ios devices:list</code></li>
<li><code>$ ios devices:add "iPad 1"=abc123</code></li>
<li><code>$ ios devices:add "iPad 2"=def456 "iPad 3"=ghi789 â€¦</code></li>
</ul>
</li>
<li><strong><a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a></strong>: I'm a big fan of Vim and I'm definitely going to post some Vim goodies in this blog almost daily, but I'd like to start with my recent discovery - <a href="https://github.com/Lokaltog/vim-powerline"> vim-powerline </a>.
<img src="https://a248.e.akamai.net/camo.github.com/3ea0c5e8e1da9827156bdd3d4af028fc2502f6ea/687474703a2f2f692e696d6775722e636f6d2f78466d4f742e706e67" alt="" /><br/>
It turns a standard Vim's status line into the prettiest thing ever, but also packed with the functionality. For me, two things are absolutely critical - it changes color when you change the editing mode, which makes it super-easy to figure out if you're in Normal or in Insert mode and it highlights your current pane, which alleviates my biggest pain with multiple panes (no pun intended) - I constantly lose track of what is my currently active pane. This little plugin cures both problems and does it with a style.
The only caveat is that it requires special patched fonts to display all those fancy characters, so it's slightly less portable, but installation of those fonts takes about a minute and it looks so good, that I don't really care about this extra step.
By the way, my own command line tools settings (aka 'dotfiles') are available <a href="https://github.com/xenocid/dotfiles">here</a>.</li>
<li><strong><a href="http://www.codethinked.com/preparing-yourself-for-modern-javascript-development">Preparing Yourself for Modern JavaScript Development</a></strong>: Pretty good articles explaining how modern, complex JavaScript apps are composed. It's important, because there's a pretty big leap between understanding the basics of JavaScript that will allow you to read (and write) simple code snippets and ability to tackle some modern JS framework like <a href="http://emberjs.com/">Ember.js</a> or <a href="http://backbonejs.org/">Backbone</a>, let alone write something similar. This article is a good bridge between those two states.</li>
</ul>

]]></content>
  </entry>
  
</feed>
